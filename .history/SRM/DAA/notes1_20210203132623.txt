Basic :
Problem -> Flowchart/Algorithm/ pseudocode -> Program -> solution

Algorithm :
    A collection of unambiguous instructions 
    a specific sequence
    input
    output
    with finite time

Characteristics of Algorithms :

    ->  input
    ->  output
    ->  Definiteness
    ->  Uniqueness
    ->  Correctness
    ->  Effectiveness
    ->  Finiteness
    ->  Simplicity
    ->  Generality

 Fundamental Stages Of Problem Solving
    Understanding the Problem
    Planning the Algorithm -> Data Structure managing
    Design the Algorithm  
    Validating The Algorithm -> Is output is correct or not
    Analysing the Algorithm -> Effienciency of the algorithm -> Based on the Time and spaces complexity
    Implementation and Empirical Analysis -> Algorithm into implementation
    Post analysis -> In this Worst case ,best case 

 Types of Algorithm
    Recursion
    Non Recursion -> No loops
    Exact -> Exact results
    Approxiamation -> Approxiamate results
    Deterministic 
    Non -Deterministic  

pseudocode :
    just text to describe the algorithm
    Supports Selection decision and repetation
    easy to understand analyse and debug

Analyse of iterative algorithm
    -> Step Count :
        number of instructions used by algorithm to perform the given task
        Eg:
        int a; count = 0
        int a = 0; count = 1
        function call or return  or break or continue ; count = 1

        for(int i = 1; i <= n; i++) // executes n times and also condition checking happens n + 1 times
        so step count is n + 1

    -> Operation Count :
        Basic: arithematic
        non basic : combination of basic operations
        i = n + 1
        j = n + 1
            n ^ 2
        c1(n +1) + c2(n + 1) + c3(n ^ 2)
    -> Asymptotic Analysis
        Big O : f(n) <= C * g(n), n >= no when c > 0 ,no > 1 then f(n) = O(g(n))
            ie ., f(n) < g(n)
        Omega
        Theta
    -> Recurrence 
        A recur
    -> Amoritized Analsis    

